# Generated Berry code from Animation DSL
# Source: user_functions_demo.anim
# 
# This file was automatically generated by compile_all_examples.sh
# Do not edit manually - changes will be overwritten

import animation

# User Functions Demo - Advanced Computed Parameters
# Shows how to use user functions in computed parameters via property assignments
# Get the current strip length for calculations
# Auto-generated strip initialization (using Tasmota configuration)
var engine = animation.init_strip()

var strip_len_ = animation.strip_length(engine)
# Example 1: Simple user function in computed parameter
var random_base_ = animation.solid(engine)
random_base_.color = 0xFF0000FF
random_base_.priority = 10
# Use user function in property assignment
random_base_.opacity = animation.create_closure_value(engine, def (self) return animation.get_user_function('rand_demo')(self.engine) end)
# Example 2: User function with mathematical operations
var random_bounded_ = animation.solid(engine)
random_bounded_.color = 0xFFFFA500
random_bounded_.priority = 8
# User function with bounds using math functions
random_bounded_.opacity = animation.create_closure_value(engine, def (self) return self.max(50, self.min(255, animation.get_user_function('rand_demo')(self.engine) + 100)) end)
# Example 3: User function in arithmetic expressions
var random_variation_ = animation.solid(engine)
random_variation_.color = 0xFF800080
random_variation_.priority = 15
# Mix user function with arithmetic operations
random_variation_.opacity = animation.create_closure_value(engine, def (self) return self.abs(animation.get_user_function('rand_demo')(self.engine) - 128) + 64 end)
# Example 4: User function affecting different properties
var random_multi_ = animation.solid(engine)
random_multi_.color = 0xFF00FFFF
random_multi_.priority = 12
# Use user function for multiple properties
random_multi_.opacity = animation.create_closure_value(engine, def (self) return self.max(100, animation.get_user_function('rand_demo')(self.engine)) end)
# Example 5: Complex expression with user function
var random_complex_ = animation.solid(engine)
random_complex_.color = 0xFFFFFFFF
random_complex_.priority = 20
# Complex expression with user function and math operations
random_complex_.opacity = animation.create_closure_value(engine, def (self) return self.round((animation.get_user_function('rand_demo')(self.engine) + 128) / 2 + self.abs(animation.get_user_function('rand_demo')(self.engine) - 100)) end)
# Run all animations to demonstrate the effects
engine.add_animation(random_base_)
engine.add_animation(random_bounded_)
engine.add_animation(random_variation_)
engine.add_animation(random_multi_)
engine.add_animation(random_complex_)
engine.start()


#- Original DSL source:
# User Functions Demo - Advanced Computed Parameters
# Shows how to use user functions in computed parameters via property assignments

# Get the current strip length for calculations
set strip_len = strip_length()

# Example 1: Simple user function in computed parameter
animation random_base = solid(
  color=blue
  priority=10
)
# Use user function in property assignment
random_base.opacity = rand_demo()

# Example 2: User function with mathematical operations
animation random_bounded = solid(
  color=orange
  priority=8
)
# User function with bounds using math functions
random_bounded.opacity = max(50, min(255, rand_demo() + 100))

# Example 3: User function in arithmetic expressions
animation random_variation = solid(
  color=purple
  priority=15
)
# Mix user function with arithmetic operations
random_variation.opacity = abs(rand_demo() - 128) + 64

# Example 4: User function affecting different properties
animation random_multi = solid(
  color=cyan
  priority=12
)
# Use user function for multiple properties
random_multi.opacity = max(100, rand_demo())

# Example 5: Complex expression with user function
animation random_complex = solid(
  color=white
  priority=20
)
# Complex expression with user function and math operations
random_complex.opacity = round((rand_demo() + 128) / 2 + abs(rand_demo() - 100))

# Run all animations to demonstrate the effects
run random_base
run random_bounded
run random_variation
run random_multi
run random_complex
-#
