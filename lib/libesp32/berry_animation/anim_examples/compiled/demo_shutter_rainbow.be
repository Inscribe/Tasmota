# Generated Berry code from Animation DSL
# Source: demo_shutter_rainbow.anim
# 
# This file was automatically generated by compile_all_examples.sh
# Do not edit manually - changes will be overwritten

import animation

# Demo Shutter Rainbow
#
# Shutter from left to right iterating in all colors
# Auto-generated strip initialization (using Tasmota configuration)
var engine = animation.init_strip()

# Template function: shutter_left_right
def shutter_left_right_template(engine, colors_, duration_)
  var strip_len_ = animation.strip_length(engine)
  var shutter_size_ = (def (engine)
    var provider = animation.sawtooth(engine)
    provider.min_value = 0
    provider.max_value = strip_len_
    provider.duration = duration_
    return provider
  end)(engine)
  var col1_ = animation.color_cycle(engine)
  col1_.palette = colors_
  col1_.cycle_period = 0
  var col2_ = animation.color_cycle(engine)
  col2_.palette = colors_
  col2_.cycle_period = 0
  col2_.next = 1
  var shutter_lr_animation_ = animation.beacon_animation(engine)
  shutter_lr_animation_.color = col2_
  shutter_lr_animation_.back_color = col1_
  shutter_lr_animation_.pos = 0
  shutter_lr_animation_.beacon_size = shutter_size_
  shutter_lr_animation_.slew_size = 0
  shutter_lr_animation_.priority = 5
  var shutter_rl_animation_ = animation.beacon_animation(engine)
  shutter_rl_animation_.color = col1_
  shutter_rl_animation_.back_color = col2_
  shutter_rl_animation_.pos = 0
  shutter_rl_animation_.beacon_size = animation.create_closure_value(engine, def (self) return self.resolve(strip_len_) - self.resolve(shutter_size_) end)
  shutter_rl_animation_.slew_size = 0
  shutter_rl_animation_.priority = 5
  var shutter_seq_ = animation.SequenceManager(engine)
    #repeat col1.palette_size times {
    .push_repeat_subsequence(animation.SequenceManager(engine, 7)
      .push_closure_step(def (engine) shutter_size_.start(engine.time_ms) end)
      .push_play_step(shutter_lr_animation_, duration_)
      .push_closure_step(def (engine) col1_.next = 1 end)
      .push_closure_step(def (engine) col2_.next = 1 end)
      )
    .push_repeat_subsequence(animation.SequenceManager(engine, def (engine) return col1_.palette_size end)
      .push_closure_step(def (engine) shutter_size_.start(engine.time_ms) end)
      .push_play_step(shutter_rl_animation_, duration_)
      .push_closure_step(def (engine) col1_.next = 1 end)
      .push_closure_step(def (engine) col2_.next = 1 end)
      )
  engine.add(shutter_seq_)
end

animation.register_user_function('shutter_left_right', shutter_left_right_template)

var Violet_ = 0xFF112233
var rainbow_with_white_ = bytes("FFFF0000" "FFFFA500" "FFFFFF00" "FF008000" "FF0000FF" "FF4B0082" "FFFFFFFF")
shutter_left_right_template(engine, rainbow_with_white_, 1500)
engine.start()


#- Original DSL source:
# Demo Shutter Rainbow
#
# Shutter from left to right iterating in all colors
  
template shutter_left_right {
  param colors type palette
  param duration

  set strip_len = strip_length()
  set shutter_size = sawtooth(min_value = 0, max_value = strip_len, duration = duration)

  color col1 = color_cycle(palette=colors, cycle_period=0)
  color col2 = color_cycle(palette=colors, cycle_period=0)
  col2.next = 1

  animation shutter_lr_animation = beacon_animation(
    color = col2
    back_color = col1
    pos = 0
    beacon_size = shutter_size
    slew_size = 0
    priority = 5
  )

  animation shutter_rl_animation = beacon_animation(
    color = col1
    back_color = col2
    pos = 0
    beacon_size = strip_len - shutter_size
    slew_size = 0
    priority = 5
  )

  sequence shutter_seq {
    #repeat col1.palette_size times {
    repeat 7 times {
      reset shutter_size
      play shutter_lr_animation for duration
      col1.next = 1
      col2.next = 1
    }
    repeat col1.palette_size times {
      reset shutter_size
      play shutter_rl_animation for duration
      col1.next = 1
      col2.next = 1
    }
  }
  
  run shutter_seq
}

color Violet = 0x112233

palette rainbow_with_white = [
  red
  orange
  yellow
  green
  blue
  indigo
  white
]

shutter_left_right(rainbow_with_white, 1.5s)

-#
